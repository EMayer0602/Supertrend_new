# Import necessary libraries
import pandas as pd
import yfinance as yf
from datetime import datetime, timedelta
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pdb
allocation_ratio = 1.5  # Can be parameterized
precision = 0.01  # For assets like BTC
initial_capital_long = 100000
initial_capital_short = 100000
initial_capital = 100000
# Get date range for last 365 days
end_date = datetime.now()
start_date = end_date - timedelta(days=365)

# Download BTC data
btc = yf.Ticker("BTC-EUR")
btc_data = btc.history(start=start_date, end=end_date)
def debug_with_print(variable):
    print(f"DEBUG: {variable=}, type={type(variable)}")
# Function to calculate technical indicators and trend signals
def calculate_indicators_and_trends(df, period=14):
    df = df.copy()
    df['TR'] = pd.DataFrame([
        df['High'] - df['Low'],
        abs(df['High'] - df['Close'].shift(1)),
        abs(df['Low'] - df['Close'].shift(1))
    ]).max()

    df['UpMove'] = df['High'] - df['High'].shift(1)
    df['DownMove'] = df['Low'].shift(1) - df['Low']

    df['+DM'] = np.where((df['UpMove'] > df['DownMove']) & (df['UpMove'] > 0), df['UpMove'], 0)
    df['-DM'] = np.where((df['DownMove'] > df['UpMove']) & (df['DownMove'] > 0), df['DownMove'], 0)

    df['TR14'] = df['TR'].rolling(window=period).sum()
    df['+DM14'] = df['+DM'].rolling(window=period).sum()
    df['-DM14'] = df['-DM'].rolling(window=period).sum()

    df['+DI'] = 100 * (df['+DM14'] / df['TR14'])
    df['-DI'] = 100 * (df['-DM14'] / df['TR14'])
    df['DX'] = 100 * abs(df['+DI'] - df['-DI']) / (df['+DI'] + df['-DI'])
    df['ADX'] = df['DX'].rolling(window=period).mean()

    # Initialize trend signals
    df['TrendUp'] = 0.0
    df['TrendDown'] = 0.0
    
    # Calculate crossovers and trend signals
    for i in range(1, len(df)):
        prev_plus_di = df['+DI'].iloc[i-1]
        prev_minus_di = df['-DI'].iloc[i-1]
        curr_plus_di = df['+DI'].iloc[i]
        curr_minus_di = df['-DI'].iloc[i]
        
        # Copy previous trends
        df.loc[df.index[i], 'TrendUp'] = df.loc[df.index[i-1], 'TrendUp']
        df.loc[df.index[i], 'TrendDown'] = df.loc[df.index[i-1], 'TrendDown']
        
        # Check for DI+ crossing above DI-
        if prev_plus_di <= prev_minus_di and curr_plus_di > curr_minus_di:
            df.loc[df.index[i], 'TrendUp'] = 1
            df.loc[df.index[i], 'TrendDown'] = 0
        
        # Check for DI- crossing above DI+
        if prev_plus_di >= prev_minus_di and curr_plus_di < curr_minus_di:
            df.loc[df.index[i], 'TrendDown'] = 1
            df.loc[df.index[i], 'TrendUp'] = 0

    columns_to_drop = ['UpMove', 'DownMove', 'TR', '+DM', '-DM', 'TR14', '+DM14', '-DM14', 'DX']
    df = df.drop(columns=columns_to_drop)
    return df

# Process data
btc_data = calculate_indicators_and_trends(btc_data)


# Function to calculate trades with independent handling for long and short positions
def generate_trading_lists(df, initial_capital_long, initial_capital_short):
    long_trades = []
    short_trades = []
    current_position = None
    entry_price = None
    entry_index = None
    entry_date = None
    shares_long = 0
    shares_short = 0
    capital_long = initial_capital_long
    capital_short = initial_capital_short

    # Iterate over the data series
    for i in range(len(df)):
        row = df.iloc[i]

        # Long-Trades: Start and Stop
        if row['TrendUp'] == 1 and current_position != 'Long':  # Start Long
            if current_position == 'Short':  # Close previous Short
                exit_price = row['Close']
                pnl_short = shares_short * (entry_price - exit_price)
                capital_short += pnl_short

                short_trades.append({
                    "Type": "Short",
                    "Buy Date": entry_date,
                    "Sell Date": row.name,
                    "Entry Price": entry_price,
                    "Exit Price": row['Close'],
                    "Shares Short": shares_short,
                    "PnL Short": pnl_short,
                    "Capital Short After Trade": capital_short,
                    "Duration": i - entry_index
                })

            current_position = 'Long'
            entry_price = row['Close']
            entry_index = i
            entry_date = row.name
            shares_long = round((allocation_ratio * (capital_long / entry_price)) / precision) * precision
            print(f"DEBUG: Starting Long Trade - entry_price={entry_price}, shares_long={shares_long}")

        if row['TrendUp'] == 0 and current_position == 'Long':  # Stop Long
            pnl_long = shares_long * (row['Close'] - entry_price)
            capital_long += pnl_long

            long_trades.append({
                "Type": "Long",
                "Buy Date": entry_date,
                "Sell Date": row.name,
                "Entry Price": entry_price,
                "Exit Price": row['Close'],
                "Shares Long": shares_long,
                "PnL Long": pnl_long,
                "Capital Long After Trade": capital_long,
                "Duration": i - entry_index
            })
            current_position = None
            print(f"DEBUG: Ending Long Trade - pnl_long={pnl_long}, capital_long={capital_long}")

        # Short-Trades: Start and Stop
        if row['TrendDown'] == 1 and current_position != 'Short':  # Start Short
            if current_position == 'Long':  # Close previous Long
                pnl_long = shares_long * (row['Close'] - entry_price)
                capital_long += pnl_long

                long_trades.append({
                    "Type": "Long",
                    "Buy Date": entry_date,
                    "Sell Date": row.name,
                    "Entry Price": entry_price,
                    "Exit Price": row['Close'],
                    "Shares Long": shares_long,
                    "PnL Long": pnl_long,
                    "Capital Long After Trade": capital_long,
                    "Duration": i - entry_index
                })

            current_position = 'Short'
            entry_price = row['Close']
            entry_index = i
            entry_date = row.name
            shares_short = round((allocation_ratio * (capital_short / entry_price)) / precision) * precision
            print(f"DEBUG: Starting Short Trade - entry_price={entry_price}, shares_short={shares_short}")

        if row['TrendDown'] == 0 and current_position == 'Short':  # Stop Short
            exit_price = row['Close']
            pnl_short = shares_short * (entry_price - exit_price)
            capital_short += pnl_short

            short_trades.append({
                "Type": "Short",
                "Buy Date": entry_date,
                "Sell Date": row.name,
                "Entry Price": entry_price,
                "Exit Price": row['Close'],
                "Shares Short": shares_short,
                "PnL Short": pnl_short,
                "Capital Short After Trade": capital_short,
                "Duration": i - entry_index
            })
            current_position = None
            print(f"DEBUG: Ending Short Trade - pnl_short={pnl_short}, capital_short={capital_short}")

    # Handle any open trades after the loop ends
    if current_position == 'Short':
        # Close the active short trade at the last available price
        exit_price = df.iloc[-1]['Close']
        pnl_short = shares_short * (entry_price - exit_price)
        capital_short += pnl_short

        short_trades.append({
            "Type": "Short",
            "Buy Date": entry_date,
            "Sell Date": df.index[-1],  # Use the last index as Sell Date
            "Entry Price": entry_price,
            "Exit Price": exit_price,
            "Shares Short": shares_short,
            "PnL Short": pnl_short,
            "Capital Short After Trade": capital_short,
            "Duration": len(df) - entry_index
        })
        print(f"DEBUG: Final Short Trade - entry_price={entry_price}, exit_price={exit_price}, pnl_short={pnl_short}, capital_short={capital_short}")

    return pd.DataFrame(long_trades), pd.DataFrame(short_trades)


# Function to calculate trade statistics
def calculate_statistics(trades, pnl_column, duration_column):
    if trades.empty:
        return {
            "Total PnL": 0,
            "Average PnL": 0,
            "Average Duration": 0,
            "Number of Trades": 0,
            "Max Drawdown": 0
        }
    total_pnl = trades[pnl_column].sum()
    avg_pnl = trades[pnl_column].mean()
    avg_duration = trades[duration_column].mean()
    num_trades = len(trades)
    max_drawdown = calculate_max_drawdown(trades, pnl_column)
    return {
        "Total PnL": total_pnl,
        "Average PnL": avg_pnl,
        "Average Duration": avg_duration,
        "Number of Trades": num_trades,
        "Max Drawdown": max_drawdown
    }

# Function to calculate max drawdown
def calculate_max_drawdown(trades, pnl_column):
    if trades.empty:
        return 0
    cumulative_pnl = trades[pnl_column].cumsum()
    peak = cumulative_pnl.cummax()
    drawdown = (cumulative_pnl - peak) / peak
    max_drawdown = drawdown.min()
    return abs(max_drawdown)

def calculate_both_equity_curves(long_trades, short_trades, btc_data, initial_capital):
    """
    Calculate both long and short equity curves based on the provided trades and BTC data.
    Ensures the last trade (e.g., short trade) is included in the equity curve.

    Parameters:
    - long_trades: DataFrame containing long trades.
    - short_trades: DataFrame containing short trades.
    - btc_data: DataFrame containing BTC price data with a datetime index.
    - initial_capital: Starting capital for both long and short trades.

    Returns:
    - long_equity_curve: Pandas Series for the long equity curve.
    - short_equity_curve: Pandas Series for the short equity curve.
    """
    # Initialize variables
    long_equity_curve = []
    short_equity_curve = []
    long_equity = initial_capital
    short_equity = initial_capital
    long_invested = False
    short_invested = False
    long_shares = 0
    short_shares = 0

    # Normalize dates in btc_data and trades
    btc_data.index = pd.to_datetime(btc_data.index).tz_localize(None)
    long_trades['Buy Date'] = pd.to_datetime(long_trades['Buy Date']).dt.normalize()
    long_trades['Sell Date'] = pd.to_datetime(long_trades['Sell Date']).dt.normalize()
    short_trades['Buy Date'] = pd.to_datetime(short_trades['Buy Date']).dt.normalize()
    short_trades['Sell Date'] = pd.to_datetime(short_trades['Sell Date']).dt.normalize()

    # Iterate over BTC data
    for i, date in enumerate(btc_data.index):
        close = btc_data.loc[date, 'Close']

        # Update long equity during an open long trade
        if long_invested:
            long_equity += long_shares * (close - btc_data.iloc[i - 1]['Close'])
        long_equity_curve.append(long_equity)

        # Update short equity during an open short trade
        if short_invested:
            short_equity += short_shares * (btc_data.iloc[i - 1]['Close'] - close)
        short_equity_curve.append(short_equity)

        # Check if a long trade starts on this date
        matching_long_trades = long_trades[long_trades['Buy Date'] == date]
        if not matching_long_trades.empty and not long_invested:
            trade = matching_long_trades.iloc[0]
            long_invested = True
            long_shares = trade['Shares Long']  # Use shares directly from long_trades
            print(f"Long Trade Started on {date}: Entry Price = {trade['Entry Price']}, Shares = {long_shares}")

        # Check if a short trade starts on this date
        matching_short_trades = short_trades[short_trades['Buy Date'] == date]
        if not matching_short_trades.empty and not short_invested:
            trade = matching_short_trades.iloc[0]
            short_invested = True
            short_shares = trade['Shares Short']  # Use shares directly from short_trades
            print(f"Short Trade Started on {date}: Entry Price = {trade['Entry Price']}, Shares = {short_shares}")

        # Check if a long trade ends on this date
        matching_long_trades = long_trades[long_trades['Sell Date'] == date]
        if not matching_long_trades.empty and long_invested:
            trade = matching_long_trades.iloc[0]
            long_invested = False
            long_shares = 0
            print(f"Long Trade Ended on {date}: Exit Price = {trade['Exit Price']}, Equity = {long_equity}")

        # Check if a short trade ends on this date
        matching_short_trades = short_trades[short_trades['Sell Date'] == date]
        if not matching_short_trades.empty and short_invested:
            trade = matching_short_trades.iloc[0]
            short_invested = False
            short_shares = 0
            print(f"Short Trade Ended on {date}: Exit Price = {trade['Exit Price']}, Equity = {short_equity}")

    # Ensure the last short trade is included in the equity curve
    if short_invested:
        last_close = btc_data.iloc[-1]['Close']
        short_equity += short_shares * (btc_data.iloc[-2]['Close'] - last_close)
        short_equity_curve[-1] = short_equity  # Update the last value in the curve
        print(f"Final Short Trade included: Exit Price = {last_close}, Equity = {short_equity}")

    # Convert equity curves to Pandas Series
    long_equity_curve = pd.Series(long_equity_curve, index=btc_data.index)
    short_equity_curve = pd.Series(short_equity_curve, index=btc_data.index)

    return long_equity_curve, short_equity_curve
    
# Example usage:
# Assuming btc_data is the DataFrame with price data, with 'Close' as a column
# Assuming initial capital

# Example initialization
initial_capital = 100000  # Starting capital for both long and short trades
#print(f"Long Trade Started on {date}: Entry Price = {trade['Entry Price']}, Shares = {long_shares}")
#print(f"Long Trade Ended on {date}: Exit Price = {trade['Exit Price']}, Equity = {long_equity}")
#matching_long_trades = long_trades[long_trades['Buy Date'] == date]
#matching_short_trades = short_trades[short_trades['Buy Date'] == date]
# Calculate equity curves
# Example initialization

# Calculate equity curves
long_equity_curve, short_equity_curve = calculate_both_equity_curves(
    long_trades=long_trades,
    short_trades=short_trades,
    btc_data=btc_data,
    initial_capital=initial_capital,
)

long_trades, short_trades = generate_trading_lists(btc_data, initial_capital_long=100000, initial_capital_short=100000)
print("Generated Long Trades:")
print(long_trades)
print("Generated Short Trades:")
print(short_trades)
# Calculate equity curves
# Assuming btc_data is the DataFrame with price data, with 'Close' as a column

# Calculate both long and short equity curves
long_equity_curve, short_equity_curve = calculate_both_equity_curves(
    long_trades=long_trades,
    short_trades=short_trades,
    btc_data=btc_data,
    initial_capital=initial_capital
)

# Print the resulting equity curves
print("Long Equity Curve:")
print(long_equity_curve)
print("Short Equity Curve:")
print(short_equity_curve)

# Calculate trade statistics
long_stats = calculate_statistics(long_trades, pnl_column="PnL Long", duration_column="Duration")
short_stats = calculate_statistics(short_trades, pnl_column="PnL Short", duration_column="Duration")

# Calculate equity curves
# Generate trades

# Combine equity curves
combined_equity_curve = long_equity_curve.add(short_equity_curve, fill_value=0)#long_equity_curve = calculate_equity_curve(long_trades, btc_data, trade_type='Long', initial_capital=100000, pnl_column="PnL Long")
#short_equity_curve = calculate_equity_curve(short_trades, btc_data, trade_type='Short', initial_capital=100000, pnl_column="PnL Short")
pd.set_option('display.max_rows', None)
    # Ensure 'Buy Date' is the index and properly normalized
    # Normalize btc_data index
#print(f"DEBUG: Final Short Trade - entry_price={entry_price}, exit_price={exit_price}, pnl_short={pnl_short}, capital_short={capital_short}")
print(long_equity_curve)
print(short_equity_curve)
# Combine equity curves
combined_equity_curve = long_equity_curve.add(short_equity_curve, fill_value=0)
print("\nCombined Equity Curve:")
print(combined_equity_curve)

# Print trade statistics
print("\nLong Trade Statistics:")
print(long_stats)

print("\nShort Trade Statistics:")
print(short_stats)


import plotly.offline as pyo
from datetime import datetime

# Create the figure with subplots
fig = make_subplots(rows=6, cols=1, 
                    shared_xaxes=True,
                    vertical_spacing=0.05,
                    subplot_titles=("BTC-EUR OHLC (Long)", "TrendUp", "Long Equity Curve", 
                                   "BTC-EUR OHLC (Short)", "TrendDown", "Short Equity Curve"))

# Long OHLC
fig.add_trace(
    go.Candlestick(
        x=btc_data.index,
        open=btc_data['Open'],
        high=btc_data['High'],
        low=btc_data['Low'],
        close=btc_data['Close'],
        name="BTC-EUR OHLC (Long)"
    ),
    row=1, col=1
)

# Generate Long entry/exit points based on TrendUp
# Find where price crosses above TrendUp (entry) and below TrendUp (exit)
long_entries = []
long_entry_prices = []
long_exits = []
long_exit_prices = []

# Starting from 2024-05-14
start_date = datetime(2024, 5, 14)
filtered_data = btc_data[btc_data.index >= start_date]

for i in range(1, len(filtered_data)):
    # Long entry: Close crosses above TrendUp
    if (filtered_data['Close'].iloc[i-1] <= filtered_data['TrendUp'].iloc[i-1] and 
        filtered_data['Close'].iloc[i] > filtered_data['TrendUp'].iloc[i]):
        long_entries.append(filtered_data.index[i])
        long_entry_prices.append(filtered_data['Close'].iloc[i])
    
    # Long exit: Close crosses below TrendUp
    if (filtered_data['Close'].iloc[i-1] >= filtered_data['TrendUp'].iloc[i-1] and 
        filtered_data['Close'].iloc[i] < filtered_data['TrendUp'].iloc[i]):
        long_exits.append(filtered_data.index[i])
        long_exit_prices.append(filtered_data['Close'].iloc[i])

# Long entry points
fig.add_trace(
    go.Scatter(
        x=long_entries,
        y=long_entry_prices,
        name="Long Entry Points",
        mode='markers',
        marker=dict(color='green', size=10, symbol='triangle-up')
    ),
    row=1, col=1
)

# Long exit points
fig.add_trace(
    go.Scatter(
        x=long_exits,
        y=long_exit_prices,
        name="Long Exit Points",
        mode='markers',
        marker=dict(color='red', size=10, symbol='x')
    ),
    row=1, col=1
)

# Long TrendUp
fig.add_trace(
    go.Scatter(
        x=btc_data.index,
        y=btc_data['TrendUp'],
        name="TrendUp",
        line=dict(color='green', dash='dot')
    ),
    row=2, col=1
)

# Long Equity Curve
fig.add_trace(
    go.Scatter(
        x=long_equity_curve.index,
        y=long_equity_curve,
        name="Long Equity Curve",
        line=dict(color='blue')
    ),
    row=3, col=1
)

# Short OHLC
fig.add_trace(
    go.Candlestick(
        x=btc_data.index,
        open=btc_data['Open'],
        high=btc_data['High'],
        low=btc_data['Low'],
        close=btc_data['Close'],
        name="BTC-EUR OHLC (Short)"
    ),
    row=4, col=1
)

# Generate Short entry/exit points based on TrendDown
short_entries = []
short_entry_prices = []
short_exits = []
short_exit_prices = []

for i in range(1, len(filtered_data)):
    # Short entry: Close crosses below TrendDown
    if (filtered_data['Close'].iloc[i-1] >= filtered_data['TrendDown'].iloc[i-1] and 
        filtered_data['Close'].iloc[i] < filtered_data['TrendDown'].iloc[i]):
        short_entries.append(filtered_data.index[i])
        short_entry_prices.append(filtered_data['Close'].iloc[i])
    
    # Short exit: Close crosses above TrendDown
    if (filtered_data['Close'].iloc[i-1] <= filtered_data['TrendDown'].iloc[i-1] and 
        filtered_data['Close'].iloc[i] > filtered_data['TrendDown'].iloc[i]):
        short_exits.append(filtered_data.index[i])
        short_exit_prices.append(filtered_data['Close'].iloc[i])

# Short entry points
fig.add_trace(
    go.Scatter(
        x=short_entries,
        y=short_entry_prices,
        name="Short Entry Points",
        mode='markers',
        marker=dict(color='red', size=10, symbol='triangle-down')
    ),
    row=4, col=1
)

# Short exit points
fig.add_trace(
    go.Scatter(
        x=short_exits,
        y=short_exit_prices,
        name="Short Exit Points",
        mode='markers',
        marker=dict(color='green', size=10, symbol='x')
    ),
    row=4, col=1
)

# Short TrendDown
fig.add_trace(
    go.Scatter(
        x=btc_data.index,
        y=btc_data['TrendDown'],
        name="TrendDown",
        line=dict(color='red', dash='dot')
    ),
    row=5, col=1
)

# Short Equity Curve
fig.add_trace(
    go.Scatter(
        x=short_equity_curve.index,
        y=short_equity_curve,
        name="Short Equity Curve",
        line=dict(color='purple')
    ),
    row=6, col=1
)

# Slider only active on the last chart
fig.update_xaxes(rangeslider_visible=False, row=1, col=1)
fig.update_xaxes(rangeslider_visible=False, row=2, col=1)
fig.update_xaxes(rangeslider_visible=False, row=3, col=1)
fig.update_xaxes(rangeslider_visible=False, row=4, col=1)
fig.update_xaxes(rangeslider_visible=False, row=5, col=1)
fig.update_xaxes(
    rangeslider_visible=True,
    row=6, col=1,
    rangeslider_thickness=0.05
)

# Set the x-axis range to focus on data from 2024-05-14 onwards
fig.update_layout(
    xaxis=dict(range=[start_date, None]),  # From start_date to the end of the data
    title="BTC-EUR Trading Strategy Analysis",
    height=1400,
    hovermode="x unified"
)

# Display the plot in a web browser
pyo.plot(fig, filename='btc_trading_analysis.html', auto_open=True)
