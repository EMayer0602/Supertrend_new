import pandas as pd
import yfinance as yf
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.patches as patches
from matplotlib.dates import date2num
import matplotlib.dates as mdates

# Download Google data
start_date = datetime(2023, 1, 1)
end_date = datetime.now()
goog = yf.download("BTC-EUR", start=start_date, end=end_date)

# Flatten the multi-level columns if needed
if isinstance(goog.columns, pd.MultiIndex):
    goog.columns = [col[0] for col in goog.columns]

# Perform Darvas Box Creation for all spans (from 3 days to n-max)
class Box:
    def __init__(self):
        self.high = []
        self.low = []
        self.date_high = []
        self.date_low = []
        self.span = []  # Store the span for each box

boxes = []

# Dynamically calculate the maximum n-day span based on the data size
n_max = max(6, len(goog) // 100)
print(f"Dynamically calculated maximum span: {n_max} days")

# Create boxes for all spans (from 3 days to n-max)
for n_day_span in range(3, n_max + 1):
    box = Box()
    idx = 0
    for i in range(1, len(goog)):
        if goog.High.iloc[i] <= goog.High.iloc[i-1]:
            idx += 1
        else:
            idx = 0

        if idx == n_day_span:
            high_vals = goog.High.iloc[i-n_day_span:i]
            low_vals = goog.Low.iloc[i-n_day_span:i]
            box.high.append(high_vals.max())
            box.low.append(low_vals.min())
            box.date_high.append(goog.index[i-n_day_span])
            box.date_low.append(goog.index[i-n_day_span + np.argmin(low_vals)])
            box.span.append(n_day_span)
    boxes.append(box)

# Plot all the boxes
plt.figure(figsize=(15, 8))

# Plot the stock price data
plt.plot(goog.index, goog.High, 'b-', alpha=0.5, linewidth=0.8, label='Price High')
plt.plot(goog.index, goog.Low, 'r-', alpha=0.5, linewidth=0.8, label='Price Low')

# Prepare the plot
ax = plt.gca()

# Draw rectangles for all boxes
for box in boxes:
    for i in range(len(box.high)):
        # Get start date and end date for the box
        start_date = date2num(box.date_high[i])
        end_date = start_date + box.span[i]
        
        # Calculate box dimensions
        width = end_date - start_date
        height = box.high[i] - box.low[i]
        
        # Draw the box
        rect = patches.Rectangle(
            (start_date, box.low[i]),  # (x, y) of bottom left corner
            width,                     # width of rectangle
            height,                    # height of rectangle
            linewidth=1,
            edgecolor='green',
            facecolor='green',
            alpha=0.3
        )
        ax.add_patch(rect)

        # Add markers for high and low points
        plt.plot(box.date_high[i], box.high[i], 'go', markersize=6, label='Box High' if i == 0 else "")
        plt.plot(box.date_low[i], box.low[i], 'mo', markersize=6, label='Box Low' if i == 0 else "")

# Format the x-axis to show dates properly
ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
plt.gcf().autofmt_xdate()

# Add grid and labels
plt.grid(True, alpha=0.3)
plt.title('Darvas Box Analysis (3-days to n-max)', fontsize=14)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Price', fontsize=12)
plt.legend(loc='best')

# Ensure the plot is displayed
plt.tight_layout()
plt.show()
