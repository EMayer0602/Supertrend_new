import pandas as pd
import yfinance as yf
from datetime import datetime, timedelta
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from ta.trend import AroonIndicator, ADXIndicator

def detect_patterns(df, high_col, low_col):
    """
    Identifiziert mögliche Dreiecke, Flaggen oder Wimpel basierend auf Hochs und Tiefs.
    """
    patterns = []
    for i in range(5, len(df) - 5):  # Mindestens 5 Kerzen für Muster
        local_highs = df[high_col].iloc[i-5:i+5]
        local_lows = df[low_col].iloc[i-5:i+5]

        # Symmetrisches Dreieck
        if local_highs.is_monotonic_decreasing and local_lows.is_monotonic_increasing:
            patterns.append((df.index[i], 'Symmetrisches Dreieck'))

        # Aufsteigendes Dreieck
        elif local_highs.is_monotonic_increasing and local_lows.is_monotonic_increasing:  # Geändert
            patterns.append((df.index[i], 'Aufsteigendes Dreieck'))

        # Absteigendes Dreieck
        elif local_highs.is_monotonic_decreasing and local_lows.is_monotonic_decreasing:
            patterns.append((df.index[i], 'Absteigendes Dreieck'))

        # Flaggen/Wimpel
        elif local_highs.is_monotonic_increasing and local_lows.is_monotonic_decreasing:
            patterns.append((df.index[i], 'Flagge oder Wimpel'))

    return patterns

def get_supertrend(high, low, close, period, multiplier):
    tr1 = high - low
    tr2 = abs(high - close.shift(1))
    tr3 = abs(low - close.shift(1))
    tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
    atr = tr.rolling(period).mean()
    basic_upper = (high + low) / 2 + (multiplier * atr)
    basic_lower = (high + low) / 2 - (multiplier * atr)
    final_upper = pd.Series(0.0, index=close.index)
    final_lower = pd.Series(0.0, index=close.index)
    supertrend = pd.Series(0.0, index=close.index)

    # Calculate final upper and lower bands
    for i in range(period, len(close)):
        if basic_upper.iloc[i] < final_upper.iloc[i-1] or close.iloc[i-1] > final_upper.iloc[i-1]:
            final_upper.iloc[i] = basic_upper.iloc[i]
        else:
            final_upper.iloc[i] = final_upper.iloc[i-1]
        if basic_lower.iloc[i] > final_lower.iloc[i-1] or close.iloc[i-1] < final_lower.iloc[i-1]:
            final_lower.iloc[i] = basic_lower.iloc[i]
        else:
            final_lower.iloc[i] = final_lower.iloc[i-1]

    # Determine Supertrend values
    for i in range(period, len(close)):
        if supertrend.iloc[i-1] == final_upper.iloc[i-1] and close.iloc[i] <= final_upper.iloc[i]:
            supertrend.iloc[i] = final_upper.iloc[i]
        elif supertrend.iloc[i-1] == final_upper.iloc[i-1] and close.iloc[i] > final_upper.iloc[i]:
            supertrend.iloc[i] = final_lower.iloc[i]
        elif supertrend.iloc[i-1] == final_lower.iloc[i-1] and close.iloc[i] >= final_lower.iloc[i]:
            supertrend.iloc[i] = final_lower.iloc[i]
        elif supertrend.iloc[i-1] == final_lower.iloc[i-1] and close.iloc[i] < final_lower.iloc[i]:
            supertrend.iloc[i] = final_upper.iloc[i]
        else:
            supertrend.iloc[i] = 0.0

    # Prepare combined Supertrend and corresponding colors
    combined = []
    colors = []  # Colors for combined Supertrend
    Close = close.iloc[period:]

    for i in range(len(Close)):
        if Close.iloc[i] > supertrend.iloc[period + i]:
            combined.append(supertrend.iloc[period + i])
            colors.append('green')  # Long trend
        elif Close.iloc[i] < supertrend.iloc[period + i]:
            combined.append(supertrend.iloc[period + i])
            colors.append('red')  # Short trend
        else:
            combined.append(np.nan)  # No trend
            colors.append('gray')  # Neutral color

    st = pd.Series(supertrend.iloc[period:].values, index=Close.index)
    combined = pd.Series(combined, index=Close.index)
    colors = pd.Series(colors, index=Close.index)  # Series containing color information

    return st, combined, colors

def implement_st_strategy(prices, st):
    buy_price = []
    sell_price = []
    st_signal = []
    signal = 0
    for i in range(len(st)):
        if st.iloc[i-1] > prices.iloc[i-1] and st.iloc[i] < prices.iloc[i]:
            if signal != 1:
                buy_price.append(prices.iloc[i])
                sell_price.append(np.nan)
                signal = 1
                st_signal.append(signal)
            else:
                buy_price.append(np.nan)
                sell_price.append(np.nan)
                st_signal.append(0)
        elif st.iloc[i-1] < prices.iloc[i-1] and st.iloc[i] > prices.iloc[i]:
            if signal != -1:
                buy_price.append(np.nan)
                sell_price.append(prices.iloc[i])
                signal = -1
                st_signal.append(signal)
            else:
                buy_price.append(np.nan)
                sell_price.append(np.nan)
                st_signal.append(0)
        else:
            buy_price.append(np.nan)
            sell_price.append(np.nan)
            st_signal.append(0)
    return buy_price, sell_price, st_signal

def add_pattern_markers(fig, patterns, df, row, col, high_col, low_col):
    """
    Adds markers for detected chart patterns to the plot.
    Aligns the y-axis with the candlestick chart (high and low prices).

    Parameters:
        fig (go.Figure): The Plotly figure object.
        patterns (list): List of tuples with (date, pattern name).
        df (pd.DataFrame): The DataFrame containing the data.
        row (int): The row number in the subplot.
        col (int): The column number in the subplot.
        high_col (str): The column name for high prices.
        low_col (str): The column name for low prices.
    """
    for date, pattern in patterns:
        if date in df.index:
            # Use the high price for the marker's y position and add some padding
            y_value = df.loc[date, high_col] * 1.01  # Slightly above the high price
        else:
            y_value = None  # Default to None if the date is not in the index

        fig.add_trace(
            go.Scatter(
                x=[date],
                y=[y_value],
                mode='markers+text',
                marker=dict(size=12, color='orange'),
                text=pattern,
                textposition='top center',
                name='Pattern'
            ),
            row=row, col=col
        )

def add_candlesticks(fig, df, row, col, open_col, high_col, low_col, close_col):
    """
    Adds candlesticks to the chart.

    Parameters:
        fig (go.Figure): The Plotly figure object.
        df (pd.DataFrame): The DataFrame containing the data.
        row (int): The row number in the subplot.
        col (int): The column number in the subplot.
        open_col (str): The column name for open prices.
        high_col (str): The column name for high prices.
        low_col (str): The column name for low prices.
        close_col (str): The column name for close prices.
    """
    fig.add_trace(
        go.Candlestick(
            x=df.index,
            open=df[open_col],
            high=df[high_col],
            low=df[low_col],
            close=df[close_col],
            name="Candlesticks"
        ),
        row=row,
        col=col
    )

def enhanced_strategy(df, high_col, low_col, close_col):
    """
    Kombiniert Mustererkennung, Supertrend und Aroon-Indikatoren.
    """
    patterns = detect_patterns(df, high_col, low_col)
    buy_signals = []
    sell_signals = []

    for i, (date, pattern) in enumerate(patterns):
        if pattern in ['Aufsteigendes Dreieck', 'Symmetrisches Dreieck']:
            if df['Supertrend'].iloc[i] < df[close_col].iloc[i] and df[f'Aroon_Up_{close_col.split("_")[1]}'].iloc[i] > 70:
                buy_signals.append(date)
        elif pattern in ['Absteigendes Dreieck', 'Flagge oder Wimpel']:
            if df['Supertrend'].iloc[i] > df[close_col].iloc[i] and df[f'Aroon_Down_{close_col.split("_")[1]}'].iloc[i] > 70:
                sell_signals.append(date)

    return buy_signals, sell_signals

def calculate_aroon_adx(df, high_col, low_col, close_col):
    try:
        # Berechnung des Aroon-Indikators
        aroon_indicator = AroonIndicator(high=df[high_col], low=df[low_col], window=25)
        df[f'Aroon_Up_{close_col.split("_")[1]}'] = aroon_indicator.aroon_up()
        df[f'Aroon_Down_{close_col.split("_")[1]}'] = aroon_indicator.aroon_down()

        # Berechnung des ADX-Indikators
        adx_indicator = ADXIndicator(high=df[high_col], low=df[low_col], close=df[close_col], window=14)
        df['ADX'] = adx_indicator.adx()
        df['ADX_Pos_DI'] = adx_indicator.adx_pos()
        df['ADX_Neg_DI'] = adx_indicator.adx_neg()

        print("Berechnung von Aroon und ADX erfolgreich abgeschlossen.")
    except Exception as e:
        print(f"Fehler bei der Berechnung von Aroon und ADX: {e}")
    return df
class TradingSystem:
    def __init__(self, initial_capital=10000, position_size=2.0, stop_loss_pct=0.92, transaction_cost=0.001):
        self.initial_capital = initial_capital
        self.position_size = position_size
        self.stop_loss_pct = stop_loss_pct
        self.transaction_cost = transaction_cost

    def generate_trading_lists(self, df, symbol):
        long_trades = []
        short_trades = []
        long_current_position = None
        short_current_position = None
        long_entry_price = None
        short_entry_price = None

        for i in range(1, len(df)):
            close_price = df[f'Close_{symbol}'].iloc[i]
            supertrend = df['Supertrend'].iloc[i]
            previous_close_price = df[f'Close_{symbol}'].iloc[i-1]
            previous_supertrend = df['Supertrend'].iloc[i-1]

            # Opening long position and covering short position
            if previous_supertrend > previous_close_price and supertrend < close_price:
                if short_current_position:  # Close short position if it exists
                    exit_price = close_price
                    exit_index = i
                    exit_date = df.index[i]
                    profit_loss = (short_entry_price - exit_price) / short_entry_price
                    short_trades.append({
                        'entry_date': short_current_position['entry_date'],
                        'entry_price': short_entry_price,
                        'exit_date': exit_date,
                        'exit_price': exit_price,
                        'profit_loss': profit_loss,
                        'entry_index': short_current_position['entry_index'],
                        'exit_index': exit_index,
                        'symbol': symbol,
                        'type': 'Short'
                    })
                    short_current_position = None

                if not long_current_position:  # Open long position if it doesn't exist
                    long_current_position = {
                        'entry_date': df.index[i],
                        'entry_index': i
                    }
                    long_entry_price = close_price

            # Closing long position and opening short position
            elif previous_supertrend < previous_close_price and supertrend >= close_price:
                if long_current_position:  # Close long position if it exists
                    exit_price = close_price
                    exit_index = i
                    exit_date = df.index[i]
                    profit_loss = (exit_price - long_entry_price) / long_entry_price
                    long_trades.append({
                        'entry_date': long_current_position['entry_date'],
                        'entry_price': long_entry_price,
                        'exit_date': exit_date,
                        'exit_price': exit_price,
                        'profit_loss': profit_loss,
                        'entry_index': long_current_position['entry_index'],
                        'exit_index': exit_index,
                        'symbol': symbol,
                        'type': 'Long'
                    })
                    long_current_position = None

                if not short_current_position:  # Open short position if it doesn't exist
                    short_current_position = {
                        'entry_date': df.index[i],
                        'entry_index': i
                    }
                    short_entry_price = close_price

        # Ensure any open positions are closed at the end of the data
        if long_current_position:
            long_trades.append({
                'entry_date': long_current_position['entry_date'],
                'entry_price': long_entry_price,
                'exit_date': df.index[-1],
                'exit_price': df[f'Close_{symbol}'].iloc[-1],
                'profit_loss': (df[f'Close_{symbol}'].iloc[-1] - long_entry_price) / long_entry_price,
                'entry_index': long_current_position['entry_index'],
                'exit_index': len(df) - 1,
                'symbol': symbol,
                'type': 'Long'
            })

        if short_current_position:
            short_trades.append({
                'entry_date': short_current_position['entry_date'],
                'entry_price': short_entry_price,
                'exit_date': df.index[-1],
                'exit_price': df[f'Close_{symbol}'].iloc[-1],
                'profit_loss': (short_entry_price - df[f'Close_{symbol}'].iloc[-1]) / short_entry_price,
                'entry_index': short_current_position['entry_index'],
                'exit_index': len(df) - 1,
                'symbol': symbol,
                'type': 'Short'
            })

        return long_trades, short_trades

    def calculate_equity_curve(self, df, trades, start_date):
        if not trades:
            return pd.Series(self.initial_capital, index=df.index)
        
        equity_curve = pd.Series(self.initial_capital, index=df.index, dtype=float)
        current_capital = self.initial_capital
        current_position = None
    
        start_date = pd.Timestamp(start_date)  # Konvertieren in Timestamp
        
        for date in df.index:
            if date < start_date:
                equity_curve.loc[date] = self.initial_capital
                continue
            
            if current_position:
                if current_position["type"] == "Long":
                    daily_return = df.loc[date, f'Close_{current_position["symbol"]}'] / df.loc[current_position["entry_date"], f'Close_{current_position["symbol"]}'] - 1
                elif current_position["type"] == "Short":
                    daily_return = df.loc[current_position["entry_date"], f'Close_{current_position["symbol"]}'] / df.loc[date, f'Close_{current_position["symbol"]}'] - 1
                current_capital = current_position["entry_capital"] * (1 + daily_return)
                equity_curve.loc[date] = current_capital
            else:
                equity_curve.loc[date] = current_capital
    
            for trade in trades:
                if pd.Timestamp(date) == pd.Timestamp(trade['entry_date']):
                    current_position = {
                        "symbol": trade["symbol"],
                        "entry_date": trade["entry_date"],
                        "entry_capital": current_capital,
                        "type": trade["type"]
                    }
                elif pd.Timestamp(date) == pd.Timestamp(trade['exit_date']) and current_position:
                    current_position = None
    
        return equity_curve.ffill().bfill()

    def _add_equity_curve(self, fig, equity_curve, name, color, row, col):
        fig.add_trace(
            go.Scatter(
                x=equity_curve.index,
                y=equity_curve.values,
                name=name,
                line=dict(color=color)
            ),
            row=row, col=col
        )

    def calculate_trade_statistics(self, trades, equity_curve):
        if not trades:
            return {
                "Total Trades": 0,
                "Winning Trades": 0,
                "Losing Trades": 0,
                "Win Rate": 0.0,
                "Average Profit": 0.0,
                "Average Loss": 0.0,
                "Profit Factor": 0.0,
                "Total Return": 0.0,
                "Max Drawdown": 0.0,
                "Sharpe Ratio": 0.0
            }
        total_trades = len(trades)
        winning_trades = len([t for t in trades if t['profit_loss'] > 0])
        losing_trades = len([t for t in trades if t['profit_loss'] <= 0])
        profits = [t['profit_loss'] for t in trades if t['profit_loss'] > 0]
        losses = [t['profit_loss'] for t in trades if t['profit_loss'] <= 0]
        avg_profit = np.mean(profits) if profits else 0
        avg_loss = np.mean(losses) if losses else 0
        total_profit = sum(profits)
        total_loss = sum(losses)
        win_rate = winning_trades / total_trades if total_trades > 0 else 0
        profit_factor = abs(total_profit / total_loss) if total_loss != 0 else float('inf')
        total_return = (equity_curve.iloc[-1] - self.initial_capital) / self.initial_capital
        max_drawdown = abs((equity_curve - equity_curve.expanding().max()).min())
        sharpe_ratio = np.sqrt(252) * (equity_curve.pct_change().dropna().mean() / equity_curve.pct_change().dropna().std()) if len(equity_curve.pct_change().dropna()) > 1 else 0
        return {
            "Total Trades": total_trades,
            "Winning Trades": winning_trades,
            "Losing Trades": losing_trades,
            "Avg Profit": avg_profit,
            "Avg Loss": avg_loss,
            "Win Rate": win_rate,
            "Profit Factor": profit_factor,
            "Total Return": total_return,
            "Max Drawdown": max_drawdown,
            "Sharpe Ratio": sharpe_ratio
        }

    def create_chart(df, stock_symbol, patterns):
        """
        Creates a chart with candlesticks and patterns.
    
        Parameters:
            df (pd.DataFrame): The DataFrame containing the stock data.
            stock_symbol (str): The stock symbol.
            patterns (list): List of tuples with (date, pattern name).
    
        Returns:
            fig (go.Figure): The Plotly figure object.
        """
        # Define column names
        open_col = f'Open_{stock_symbol}'
        high_col = f'High_{stock_symbol}'
        low_col = f'Low_{stock_symbol}'
        close_col = f'Close_{stock_symbol}'
    
        # Create the figure with proper layout configuration
        fig = make_subplots(
            rows=4, cols=1, shared_xaxes=True, vertical_spacing=0.05,
            row_heights=[0.8, 0.05, 0.05, 0.05]  # Allocate 80% of height to candlestick chart
        )
    
        # Add candlestick chart
        fig.add_trace(
            go.Candlestick(
                x=df.index,
                open=df[open_col],
                high=df[high_col],
                low=df[low_col],
                close=df[close_col],
                name="Candlesticks"
            ),
            row=1, col=1
        )
    
        # Add pattern markers
        add_pattern_markers(fig, patterns, df, row=1, col=1, high_col=high_col, low_col=low_col)
    
        # Update layout (enlarge y-axis and minimize slider size)
        fig.update_layout(
            title=f'{stock_symbol} Chart with Patterns',
            height=1200,  # Increase overall chart height
            xaxis1=dict(
                rangeslider=dict(
                    visible=True,
                    thickness=0.01  # Minimized slider size
                )
            )
        )
    
        return fig
    
    def plot_results(self, df, long_trades, short_trades, long_equity, short_equity, buy_and_hold_equity, symbol):
        # Prepare data for plots
        plot_df = df.iloc[15:]  # Skip first 15 rows for clarity
        plot_long_equity = long_equity.iloc[15:]
        plot_short_equity = short_equity.iloc[15:]
        plot_buy_and_hold_equity = buy_and_hold_equity.iloc[15:]
        combined_equity = plot_long_equity + plot_short_equity - self.initial_capital
        combined_equity = combined_equity.ffill().bfill()  # Fill gaps in combined equity
    
        # Create subplots
        fig = make_subplots(
            rows=4, cols=1,  # Four rows: Price/Supertrend, Aroon, ADX, Equity
            shared_xaxes=True,
            vertical_spacing=0.05,
            subplot_titles=(
                f'{symbol} Price, Combined Supertrend and Trade Signals',
                'Aroon Indicators',
                'ADX Indicator',
                f'{symbol} Equity Curves'
            ),
            row_heights=[0.4, 0.2, 0.2, 0.2]
        )
    
        # Candlestick chart
        fig.add_trace(
            go.Candlestick(
                x=plot_df.index,
                open=plot_df[f'Open_{symbol}'],
                high=plot_df[f'High_{symbol}'],
                low=plot_df[f'Low_{symbol}'],
                close=plot_df[f'Close_{symbol}'],
                name='Candlestick'
            ),
            row=1, col=1
        )
    
        # Combined Supertrend with dynamic coloring
        for i in range(len(plot_df) - 1):
            fig.add_trace(
                go.Scatter(
                    x=[plot_df.index[i], plot_df.index[i + 1]],
                    y=[plot_df['CombinedSupertrend'].iloc[i], plot_df['CombinedSupertrend'].iloc[i + 1]],
                    mode='lines',
                    line=dict(
                        color='green' if plot_df['SupertrendColors'].iloc[i] == 'green' else 'red',
                        width=2
                    ),
                    name='Combined Supertrend',
                    showlegend=(i == 0)  # Only show legend once
                ),
                row=1, col=1
            )
    
        # Long trade markers (Entry and Exit)
        if long_trades:
            long_entries = [trade['entry_date'] for trade in long_trades]
            long_entry_prices = [trade['entry_price'] for trade in long_trades]
            long_exits = [trade['exit_date'] for trade in long_trades]
            long_exit_prices = [trade['exit_price'] for trade in long_trades]
    
            fig.add_trace(
                go.Scatter(
                    x=long_entries,
                    y=[price * 1.01 for price in long_entry_prices],
                    mode='markers',
                    name='Long Entry',
                    marker=dict(symbol='triangle-up', size=10, color='green')
                ),
                row=1, col=1
            )
            fig.add_trace(
                go.Scatter(
                    x=long_exits,
                    y=[price * 1.01 for price in long_exit_prices],
                    mode='markers',
                    name='Long Exit',
                    marker=dict(symbol='triangle-down', size=10, color='red')
                ),
                row=1, col=1
            )
    
        # Short trade markers (Entry and Exit)
        if short_trades:
            short_entries = [trade['entry_date'] for trade in short_trades]
            short_entry_prices = [trade['entry_price'] for trade in short_trades]
            short_exits = [trade['exit_date'] for trade in short_trades]
            short_exit_prices = [trade['exit_price'] for trade in short_trades]
    
            fig.add_trace(
                go.Scatter(
                    x=short_entries,
                    y=[price * 0.99 for price in short_entry_prices],
                    mode='markers',
                    name='Short Entry',
                    marker=dict(symbol='triangle-down', size=10, color='blue')
                ),
                row=1, col=1
            )
            fig.add_trace(
                go.Scatter(
                    x=short_exits,
                    y=[price * 0.99 for price in short_exit_prices],
                    mode='markers',
                    name='Short Exit',
                    marker=dict(symbol='triangle-up', size=10, color='black')
                ),
                row=1, col=1
            )
    
        # Aroon indicators
        aroon_up_col = f'Aroon_Up_{symbol}'
        aroon_down_col = f'Aroon_Down_{symbol}'
        fig.add_trace(
            go.Scatter(
                x=plot_df.index,
                y=plot_df[aroon_up_col],
                mode='lines',
                name='Aroon Up',
                line=dict(color='green', width=2)
            ),
            row=2, col=1
        )
        fig.add_trace(
            go.Scatter(
                x=plot_df.index,
                y=plot_df[aroon_down_col],
                mode='lines',
                name='Aroon Down',
                line=dict(color='red', width=2)
            ),
            row=2, col=1
        )
    
        # ADX indicators
        fig.add_trace(
            go.Scatter(
                x=plot_df.index,
                y=plot_df['ADX'],
                mode='lines',
                name='ADX',
                line=dict(color='blue', width=2)
            ),
            row=3, col=1
        )
        fig.add_trace(
            go.Scatter(
                x=plot_df.index,
                y=plot_df['ADX_Pos_DI'],
                mode='lines',
                name='+DI',
                line=dict(color='green', dash='dot', width=2)
            ),
            row=3, col=1
        )
        fig.add_trace(
            go.Scatter(
                x=plot_df.index,
                y=plot_df['ADX_Neg_DI'],
                mode='lines',
                name='-DI',
                line=dict(color='red', dash='dot', width=2)
            ),
            row=3, col=1
        )
        # Add slider to equity chart with adjusted size
        fig.update_layout(
            xaxis4=dict(
                rangeslider=dict(
                    visible=True,  # Ensure slider is tied to the second x-axis
                    thickness=0.05  # Set slider thickness to a small value (min is 0, max is 1)
                )
            )
        )
        fig.update_layout(
            xaxis1=dict(
                rangeslider=dict(
                    visible=False
                )
            )
        )    
        # Equity curves
        fig.add_trace(
            go.Scatter(
                x=plot_long_equity.index,
                y=plot_long_equity.values,
                mode='lines',
                name='Long Equity',
                line=dict(color='green', width=2)
            ),
            row=4, col=1
        )
        fig.add_trace(
            go.Scatter(
                x=plot_short_equity.index,
                y=plot_short_equity.values,
                mode='lines',
                name='Short Equity',
                line=dict(color='red', width=2)
            ),
            row=4, col=1
        )
        fig.add_trace(
            go.Scatter(
                x=combined_equity.index,
                y=combined_equity.values,
                mode='lines',
                name='Combined Equity',
                line=dict(color='blue', width=2)
            ),
            row=4, col=1
        )
        fig.add_trace(
            go.Scatter(
                x=plot_buy_and_hold_equity.index,
                y=plot_buy_and_hold_equity.values,
                mode='lines',
                name='Buy and Hold Equity',
                line=dict(color='brown')
#                line=dict(color='violet', dash='dash')
            ),
            row=4, col=1
        )
    
        # Update layout
        fig.update_layout(
            title=f'Trading System Results for {symbol}',
            height=1200,
            showlegend=True
        )
        return fig

    def print_statistics(self, stats, trade_type=""):
        print(f"\n{trade_type} Trading Statistics:")
        print("=" * 50)
        excluded_keys = ["Daily Returns", "Rolling Max", "Drawdown"]
        for key, value in stats.items():
            if key in excluded_keys:
                continue
            if isinstance(value, float):
                print(f"{key}: {value:.2f}")
            elif isinstance(value, list):
                formatted_list = ', '.join(f"{v:.2f}" if isinstance(v, float) else str(v) for v in value)
                print(f"{key}: {formatted_list}")
            elif isinstance(value, pd.Series):
                formatted_series = value.to_string()
                print(f"{key}:\n{formatted_series}")
            else:
                print(f"{key}: {value}")
def main():
    stock_symbol = "ETH-EUR"
    system = TradingSystem()  # Instanziierung der TradingSystem-Klasse
    print(stock_symbol)

    end_date = datetime.now()
    start_date = end_date - timedelta(days=365)

    # Laden der Daten
    stock_data = yf.download(stock_symbol, start=start_date, end=end_date)
    print("Available columns in stock_data:")
    print(stock_data.columns)

    # Flatten den DataFrame (nur einmal)
    stock_data = flatten_dataframe(stock_data)

    # Spaltennamen definieren
    close_col = f'Close_{stock_symbol}'
    high_col = f'High_{stock_symbol}'
    low_col = f'Low_{stock_symbol}'

    # Berechnung von Supertrend
    st, combined_supertrend, supertrend_colors = get_supertrend(
        stock_data[high_col], stock_data[low_col], stock_data[close_col], 7, 3
    )
    stock_data['Supertrend'] = st
    stock_data['CombinedSupertrend'] = combined_supertrend
    stock_data['SupertrendColors'] = supertrend_colors

    # Implementierung der Supertrend-Strategie
    buy_price, sell_price, st_signal = implement_st_strategy(stock_data[close_col], stock_data['Supertrend'])
    stock_data['Buy_Signal_Price'] = buy_price
    stock_data['Sell_Signal_Price'] = sell_price
    stock_data['ST_Signal'] = st_signal

    # Berechnung von Aroon und ADX
    print("Berechnung von Aroon und ADX...")
    stock_data = calculate_aroon_adx(stock_data, high_col, low_col, close_col)

    # Mustererkennung: Dreiecke, Flaggen und Wimpel
    print("Erkennung von Chartmustern...")
    patterns = detect_patterns(stock_data, high_col, low_col)
    print(f"Erkannte Muster: {patterns}")

    # Erweiterte Strategie mit Mustern, Supertrend und Aroon
    print("Generiere Kauf- und Verkaufssignale basierend auf Mustern...")
    buy_signals, sell_signals = enhanced_strategy(stock_data, high_col, low_col, close_col)

    # Hinzufügen der Signale in den DataFrame
    stock_data['Pattern_Buy_Signals'] = stock_data.index.isin(buy_signals)
    stock_data['Pattern_Sell_Signals'] = stock_data.index.isin(sell_signals)

    # Generierung von Handelslisten
    long_trades, short_trades = system.generate_trading_lists(stock_data, stock_symbol)

    # Berechnung der Equity-Kurven
    long_equity = system.calculate_equity_curve(stock_data, long_trades, '2023-05-21')
    short_equity = system.calculate_equity_curve(stock_data, short_trades, '2023-06-19')

    # Kombinierte Equity
    combined_equity = long_equity.combine_first(short_equity) - system.initial_capital + system.initial_capital

    # Buy-and-Hold-Equity
    buy_and_hold_equity = (stock_data[close_col] / stock_data[close_col].iloc[0]) * system.initial_capital

    # Debugging: Handelsdaten
    print("Long Trades:")
    print(pd.DataFrame(long_trades).to_string(index=False))
    print("\nShort Trades:")
    print(pd.DataFrame(short_trades).to_string(index=False))

    # Handelsstatistiken berechnen
    long_stats = system.calculate_trade_statistics(long_trades, long_equity)
    short_stats = system.calculate_trade_statistics(short_trades, short_equity)
    system.print_statistics(long_stats, "Long")
    system.print_statistics(short_stats, "Short")
    # Define the column names for high and low prices
# Define the column names for high and low prices
    high_col = f'High_{stock_symbol}'
    low_col = f'Low_{stock_symbol}'
    
     # Example patterns
    patterns = [
        ('2025-04-01', 'Symmetrisches Dreieck'),
        ('2025-04-05', 'Flagge oder Wimpel')
    ]

    # Create the chart
    fig = create_chart(stock_data, stock_symbol, patterns)

    # Show the chart
    fig.show()

import plotly.io as pio
pio.renderers.default = 'browser'

if __name__ == "__main__":
    main()
    
