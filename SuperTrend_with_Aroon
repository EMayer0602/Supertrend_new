
import pandas as pd
import yfinance as yf
from datetime import datetime, timedelta
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from ta.trend import AroonIndicator, ADXIndicator


def flatten_dataframe(df):
    flattened_df = df.copy()
    if isinstance(df.columns, pd.MultiIndex):
        flattened_df.columns = ['_'.join(col).strip() for col in df.columns.values]
    print(f"NaN values in flattened DataFrame: {flattened_df.isna().sum().sum()}")
    return flattened_df

def get_supertrend(high, low, close, period, multiplier):
    tr1 = high - low
    tr2 = abs(high - close.shift(1))
    tr3 = abs(low - close.shift(1))
    tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
    atr = tr.rolling(period).mean()
    basic_upper = (high + low) / 2 + (multiplier * atr)
    basic_lower = (high + low) / 2 - (multiplier * atr)
    final_upper = pd.Series(0.0, index=close.index)
    final_lower = pd.Series(0.0, index=close.index)
    supertrend = pd.Series(0.0, index=close.index)

    # Calculate final upper and lower bands
    for i in range(period, len(close)):
        if basic_upper.iloc[i] < final_upper.iloc[i-1] or close.iloc[i-1] > final_upper.iloc[i-1]:
            final_upper.iloc[i] = basic_upper.iloc[i]
        else:
            final_upper.iloc[i] = final_upper.iloc[i-1]
        if basic_lower.iloc[i] > final_lower.iloc[i-1] or close.iloc[i-1] < final_lower.iloc[i-1]:
            final_lower.iloc[i] = basic_lower.iloc[i]
        else:
            final_lower.iloc[i] = final_lower.iloc[i-1]

    # Determine Supertrend values
    for i in range(period, len(close)):
        if supertrend.iloc[i-1] == final_upper.iloc[i-1] and close.iloc[i] <= final_upper.iloc[i]:
            supertrend.iloc[i] = final_upper.iloc[i]
        elif supertrend.iloc[i-1] == final_upper.iloc[i-1] and close.iloc[i] > final_upper.iloc[i]:
            supertrend.iloc[i] = final_lower.iloc[i]
        elif supertrend.iloc[i-1] == final_lower.iloc[i-1] and close.iloc[i] >= final_lower.iloc[i]:
            supertrend.iloc[i] = final_lower.iloc[i]
        elif supertrend.iloc[i-1] == final_lower.iloc[i-1] and close.iloc[i] < final_lower.iloc[i]:
            supertrend.iloc[i] = final_upper.iloc[i]
        else:
            supertrend.iloc[i] = 0.0

    # Prepare combined Supertrend and corresponding colors
    combined = []
    colors = []  # Colors for combined Supertrend
    Close = close.iloc[period:]

    for i in range(len(Close)):
        if Close.iloc[i] > supertrend.iloc[period + i]:
            combined.append(supertrend.iloc[period + i])
            colors.append('green')  # Long trend
        elif Close.iloc[i] < supertrend.iloc[period + i]:
            combined.append(supertrend.iloc[period + i])
            colors.append('red')  # Short trend
        else:
            combined.append(np.nan)  # No trend
            colors.append('gray')  # Neutral color

    st = pd.Series(supertrend.iloc[period:].values, index=Close.index)
    combined = pd.Series(combined, index=Close.index)
    colors = pd.Series(colors, index=Close.index)  # Series containing color information

    return st, combined, colors
    
def implement_st_strategy(prices, st):
    buy_price = []
    sell_price = []
    st_signal = []
    signal = 0
    for i in range(len(st)):
        if st.iloc[i-1] > prices.iloc[i-1] and st.iloc[i] < prices.iloc[i]:
            if signal != 1:
                buy_price.append(prices.iloc[i])
                sell_price.append(np.nan)
                signal = 1
                st_signal.append(signal)
            else:
                buy_price.append(np.nan)
                sell_price.append(np.nan)
                st_signal.append(0)
        elif st.iloc[i-1] < prices.iloc[i-1] and st.iloc[i] > prices.iloc[i]:
            if signal != -1:
                buy_price.append(np.nan)
                sell_price.append(prices.iloc[i])
                signal = -1
                st_signal.append(signal)
            else:
                buy_price.append(np.nan)
                sell_price.append(np.nan)
                st_signal.append(0)
        else:
            buy_price.append(np.nan)
            sell_price.append(np.nan)
            st_signal.append(0)
    return buy_price, sell_price, st_signal

def calculate_aroon_adx(df, high_col, low_col, close_col):
    try:
        # Aroon-Indikator berechnen
        aroon_indicator = AroonIndicator(high=df[high_col], low=df[low_col], window=25)
#        df['Aroon_Up'] = aroon_indicator.aroon_up()
#        df['Aroon_Down'] = aroon_indicator.aroon_down()

        df[f'Aroon_Up_{close_col.split("_")[1]}'] = aroon_indicator.aroon_up()
        df[f'Aroon_Down_{close_col.split("_")[1]}'] = aroon_indicator.aroon_down()
        
        # ADX-Indikator berechnen
        adx_indicator = ADXIndicator(high=df[high_col], low=df[low_col], close=df[close_col], window=14)
        df['ADX'] = adx_indicator.adx()
        df['ADX_Pos_DI'] = adx_indicator.adx_pos()
        df['ADX_Neg_DI'] = adx_indicator.adx_neg()

        print("Berechnung von Aroon und ADX erfolgreich abgeschlossen.")
    except Exception as e:
        print(f"Fehler bei der Berechnung von Aroon und ADX: {e}")

    return df

class TradingSystem:
    def __init__(self, initial_capital=10000, position_size=2.0, stop_loss_pct=0.92, transaction_cost=0.001):
        self.initial_capital = initial_capital
        self.position_size = position_size
        self.stop_loss_pct = stop_loss_pct
        self.transaction_cost = transaction_cost

    def generate_trading_lists(self, df, symbol):
        long_trades = []
        short_trades = []
        long_current_position = None
        short_current_position = None
        long_entry_price = None
        short_entry_price = None

        for i in range(1, len(df)):
            close_price = df[f'Close_{symbol}'].iloc[i]
            supertrend = df['Supertrend'].iloc[i]
            previous_close_price = df[f'Close_{symbol}'].iloc[i-1]
            previous_supertrend = df['Supertrend'].iloc[i-1]

            # Opening long position and covering short position
            if previous_supertrend > previous_close_price and supertrend < close_price:
                if short_current_position:  # Close short position if it exists
                    exit_price = close_price
                    exit_index = i
                    exit_date = df.index[i]
                    profit_loss = (short_entry_price - exit_price) / short_entry_price
                    short_trades.append({
                        'entry_date': short_current_position['entry_date'],
                        'entry_price': short_entry_price,
                        'exit_date': exit_date,
                        'exit_price': exit_price,
                        'profit_loss': profit_loss,
                        'entry_index': short_current_position['entry_index'],
                        'exit_index': exit_index,
                        'symbol': symbol,
                        'type': 'Short'
                    })
                    short_current_position = None

                if not long_current_position:  # Open long position if it doesn't exist
                    long_current_position = {
                        'entry_date': df.index[i],
                        'entry_index': i
                    }
                    long_entry_price = close_price

            # Closing long position and opening short position
            elif previous_supertrend < previous_close_price and supertrend >= close_price:
                if long_current_position:  # Close long position if it exists
                    exit_price = close_price
                    exit_index = i
                    exit_date = df.index[i]
                    profit_loss = (exit_price - long_entry_price) / long_entry_price
                    long_trades.append({
                        'entry_date': long_current_position['entry_date'],
                        'entry_price': long_entry_price,
                        'exit_date': exit_date,
                        'exit_price': exit_price,
                        'profit_loss': profit_loss,
                        'entry_index': long_current_position['entry_index'],
                        'exit_index': exit_index,
                        'symbol': symbol,
                        'type': 'Long'
                    })
                    long_current_position = None

                if not short_current_position:  # Open short position if it doesn't exist
                    short_current_position = {
                        'entry_date': df.index[i],
                        'entry_index': i
                    }
                    short_entry_price = close_price

        # Ensure any open positions are closed at the end of the data
        if long_current_position:
            long_trades.append({
                'entry_date': long_current_position['entry_date'],
                'entry_price': long_entry_price,
                'exit_date': df.index[-1],
                'exit_price': df[f'Close_{symbol}'].iloc[-1],
                'profit_loss': (df[f'Close_{symbol}'].iloc[-1] - long_entry_price) / long_entry_price,
                'entry_index': long_current_position['entry_index'],
                'exit_index': len(df) - 1,
                'symbol': symbol,
                'type': 'Long'
            })

        if short_current_position:
            short_trades.append({
                'entry_date': short_current_position['entry_date'],
                'entry_price': short_entry_price,
                'exit_date': df.index[-1],
                'exit_price': df[f'Close_{symbol}'].iloc[-1],
                'profit_loss': (short_entry_price - df[f'Close_{symbol}'].iloc[-1]) / short_entry_price,
                'entry_index': short_current_position['entry_index'],
                'exit_index': len(df) - 1,
                'symbol': symbol,
                'type': 'Short'
            })

        return long_trades, short_trades

    def calculate_equity_curve(self, df, trades, start_date):
        if not trades:
            return pd.Series(self.initial_capital, index=df.index)
        
        equity_curve = pd.Series(self.initial_capital, index=df.index, dtype=float)
        current_capital = self.initial_capital
        current_position = None
    
        start_date = pd.Timestamp(start_date)  # Konvertieren in Timestamp
        
        for date in df.index:
            if date < start_date:
                equity_curve.loc[date] = self.initial_capital
                continue
            
            if current_position:
                if current_position["type"] == "Long":
                    daily_return = df.loc[date, f'Close_{current_position["symbol"]}'] / df.loc[current_position["entry_date"], f'Close_{current_position["symbol"]}'] - 1
                elif current_position["type"] == "Short":
                    daily_return = df.loc[current_position["entry_date"], f'Close_{current_position["symbol"]}'] / df.loc[date, f'Close_{current_position["symbol"]}'] - 1
                current_capital = current_position["entry_capital"] * (1 + daily_return)
                equity_curve.loc[date] = current_capital
            else:
                equity_curve.loc[date] = current_capital
    
            for trade in trades:
                if pd.Timestamp(date) == pd.Timestamp(trade['entry_date']):
                    current_position = {
                        "symbol": trade["symbol"],
                        "entry_date": trade["entry_date"],
                        "entry_capital": current_capital,
                        "type": trade["type"]
                    }
                elif pd.Timestamp(date) == pd.Timestamp(trade['exit_date']) and current_position:
                    current_position = None
    
        return equity_curve.ffill().bfill()

    def _add_equity_curve(self, fig, equity_curve, name, color, row, col):
        fig.add_trace(
            go.Scatter(
                x=equity_curve.index,
                y=equity_curve.values,
                name=name,
                line=dict(color=color)
            ),
            row=row, col=col
        )

    def calculate_trade_statistics(self, trades, equity_curve):
        if not trades:
            return {
                "Total Trades": 0,
                "Winning Trades": 0,
                "Losing Trades": 0,
                "Win Rate": 0.0,
                "Average Profit": 0.0,
                "Average Loss": 0.0,
                "Profit Factor": 0.0,
                "Total Return": 0.0,
                "Max Drawdown": 0.0,
                "Sharpe Ratio": 0.0
            }
        total_trades = len(trades)
        winning_trades = len([t for t in trades if t['profit_loss'] > 0])
        losing_trades = len([t for t in trades if t['profit_loss'] <= 0])
        profits = [t['profit_loss'] for t in trades if t['profit_loss'] > 0]
        losses = [t['profit_loss'] for t in trades if t['profit_loss'] <= 0]
        avg_profit = np.mean(profits) if profits else 0
        avg_loss = np.mean(losses) if losses else 0
        total_profit = sum(profits)
        total_loss = sum(losses)
        win_rate = winning_trades / total_trades if total_trades > 0 else 0
        profit_factor = abs(total_profit / total_loss) if total_loss != 0 else float('inf')
        total_return = (equity_curve.iloc[-1] - self.initial_capital) / self.initial_capital
        max_drawdown = abs((equity_curve - equity_curve.expanding().max()).min())
        sharpe_ratio = np.sqrt(252) * (equity_curve.pct_change().dropna().mean() / equity_curve.pct_change().dropna().std()) if len(equity_curve.pct_change().dropna()) > 1 else 0
        return {
            "Total Trades": total_trades,
            "Winning Trades": winning_trades,
            "Losing Trades": losing_trades,
            "Avg Profit": avg_profit,
            "Avg Loss": avg_loss,
            "Win Rate": win_rate,
            "Profit Factor": profit_factor,
            "Total Return": total_return,
            "Max Drawdown": max_drawdown,
            "Sharpe Ratio": sharpe_ratio
        }
            
    def plot_results(self, df, long_trades, short_trades, long_equity, short_equity, buy_and_hold_equity, symbol):
        # Prepare data for plots
        plot_df = df.iloc[15:]  # Skip first 15 rows to improve plot clarity
        plot_long_equity = long_equity.iloc[15:]
        plot_short_equity = short_equity.iloc[15:]
        plot_buy_and_hold_equity = buy_and_hold_equity.iloc[15:]
        combined_equity = plot_long_equity + plot_short_equity - self.initial_capital  # Combined equity
        combined_equity = combined_equity.ffill().bfill()  # Fill any gaps in the curve
    
        # Create subplot
        fig = make_subplots(
            rows=4, cols=1,  # Four rows: Price, Aroon, ADX, Equity
            shared_xaxes=True,
            vertical_spacing=0.05,
            subplot_titles=(
                f'{symbol} Price, Supertrend and Trade Signals',
                'Aroon Indicators',
                'ADX Indicator',
                f'{symbol} Equity Curves'
            ),
            row_heights=[0.4, 0.2, 0.2, 0.2]
        )
    
        # Candlestick chart with Supertrend
        fig.add_trace(
            go.Candlestick(
                x=plot_df.index,
                open=plot_df[f'Open_{symbol}'],
                high=plot_df[f'High_{symbol}'],
                low=plot_df[f'Low_{symbol}'],
                close=plot_df[f'Close_{symbol}'],
                name='Candlestick'
            ),
            row=1, col=1
        )
''''    
        # Add Supertrend Long (green)
        fig.add_trace(
            go.Scatter(
                x=plot_df.index,
                y=plot_df['SupertrendUp'],
                mode='lines',
                name='Supertrend Long',
                line=dict(color='green', width=2),
                connectgaps=True  # Ensure there are no gaps in the curve
            ),
            row=1, col=1
        )
    
        # Add Supertrend Short (red)
        fig.add_trace(
            go.Scatter(
                x=plot_df.index,
                y=plot_df['SupertrendDown'],
                mode='lines',
                name='Supertrend Short',
                line=dict(color='red', width=2),
                connectgaps=True  # Ensure there are no gaps in the curve
            ),
            row=1, col=1
        )
'''
        # Plot Combined Supertrend with color-coding
        fig.add_trace(
            go.Scatter(
                x=plot_df.index,
                y=plot_df['CombinedSupertrend'],
                mode='lines',
                name='Combined Supertrend',
                line=dict(width=2),
                marker=dict(color=plot_df['SupertrendColors'])  # Use the color column for dynamic coloring
            ),
            row=1, col=1
        )
# Add Long trading icons (Entry and Exit)
        if long_trades:
            long_entries = [trade['entry_date'] for trade in long_trades]
            long_entry_prices = [trade['entry_price'] for trade in long_trades]
            long_exits = [trade['exit_date'] for trade in long_trades]
            long_exit_prices = [trade['exit_price'] for trade in long_trades]
    
            fig.add_trace(
                go.Scatter(
                    x=long_entries,
                    y=[price * 1.01 for price in long_entry_prices],  # 1% offset
                    mode='markers',
                    name='Long Entry',
                    marker=dict(symbol='triangle-up', size=10, color='green')
                ),
                row=1, col=1
            )
            fig.add_trace(
                go.Scatter(
                    x=long_exits,
                    y=[price * 1.01 for price in long_exit_prices],  # 1% offset
                    mode='markers',
                    name='Long Exit',
                    marker=dict(symbol='triangle-down', size=10, color='red')
                ),
                row=1, col=1
            )
    
        # Add Short trading icons (Entry and Exit)
        if short_trades:
            short_entries = [trade['entry_date'] for trade in short_trades]
            short_entry_prices = [trade['entry_price'] for trade in short_trades]
            short_exits = [trade['exit_date'] for trade in short_trades]
            short_exit_prices = [trade['exit_price'] for trade in short_trades]
    
            fig.add_trace(
                go.Scatter(
                    x=short_entries,
                    y=[price * 0.99 for price in short_entry_prices],  # -1% offset
                    mode='markers',
                    name='Short Entry',
                    marker=dict(symbol='triangle-down', size=10, color='blue')
                ),
                row=1, col=1
            )
            fig.add_trace(
                go.Scatter(
                    x=short_exits,
                    y=[price * 0.99 for price in short_exit_prices],  # -1% offset
                    mode='markers',
                    name='Short Exit',
                    marker=dict(symbol='triangle-up', size=10, color='black')
                ),
                row=1, col=1
            )
    
        # Add Aroon Indicators
        aroon_up_col = f'Aroon_Up_{symbol}'
        aroon_down_col = f'Aroon_Down_{symbol}'
        if aroon_up_col in plot_df.columns and aroon_down_col in plot_df.columns:
            fig.add_trace(
                go.Scatter(
                    x=plot_df.index,
                    y=plot_df[aroon_up_col],
                    mode='lines',
                    name='Aroon Up',
                    line=dict(color='green', width=2)
                ),
                row=2, col=1
            )
            fig.add_trace(
                go.Scatter(
                    x=plot_df.index,
                    y=plot_df[aroon_down_col],
                    mode='lines',
                    name='Aroon Down',
                    line=dict(color='red', width=2)
                ),
                row=2, col=1
            )
    
        # Add ADX and DI Indicators
        fig.add_trace(
            go.Scatter(
                x=plot_df.index,
                y=plot_df['ADX'],
                mode='lines',
                name='ADX',
                line=dict(color='blue', width=2)
            ),
            row=3, col=1
        )
        fig.add_trace(
            go.Scatter(
                x=plot_df.index,
                y=plot_df['ADX_Pos_DI'],
                mode='lines',
                name='+DI',
                line=dict(color='green', dash='dot', width=2)
            ),
            row=3, col=1
        )
        fig.add_trace(
            go.Scatter(
                x=plot_df.index,
                y=plot_df['ADX_Neg_DI'],
                mode='lines',
                name='-DI',
                line=dict(color='red', dash='dot', width=2)
            ),
            row=3, col=1
        )
    
        # Add Equity Curves
        fig.add_trace(
            go.Scatter(
                x=plot_long_equity.index,
                y=plot_long_equity.values,
                mode='lines',
                name='Long Equity',
                line=dict(color='green', width=2)
            ),
            row=4, col=1
        )
        fig.add_trace(
            go.Scatter(
                x=plot_short_equity.index,
                y=plot_short_equity.values,
                mode='lines',
                name='Short Equity',
                line=dict(color='red', width=2)
            ),
            row=4, col=1
        )
        fig.add_trace(
            go.Scatter(
                x=combined_equity.index,
                y=combined_equity.values,
                mode='lines',
                name='Combined Equity',
                line=dict(color='blue', width=2)
            ),
            row=4, col=1
        )
        fig.add_trace(
            go.Scatter(
                x=plot_buy_and_hold_equity.index,
                y=plot_buy_and_hold_equity.values,
                mode='lines',
                name='Buy and Hold Equity',
                line=dict(color='orange', width=2, dash='dash')
            ),
            row=4, col=1
        )
    
        # Update layout
        fig.update_layout(
            title=f'Trading System Results for {symbol}',
            xaxis=dict(rangeslider=dict(visible=False)),
            yaxis_title='Price',
            yaxis2_title='Aroon',
            yaxis3_title='ADX',
            yaxis4_title='Equity',
            height=1200,
            showlegend=True,
            legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01)
        )
        return fig
    def calculate_trade_statistics(self, trades, equity_curve):
        if not trades:
            return {
                "Total Trades": 0,
                "Winning Trades": 0,
                "Losing Trades": 0,
                "Win Rate": 0.0,
                "Average Profit": 0.0,
                "Average Loss": 0.0,
                "Profit Factor": 0.0,
                "Total Return": 0.0,
                "Max Drawdown": 0.0,
                "Sharpe Ratio": 0.0
            }
        total_trades = len(trades)
        winning_trades = len([t for t in trades if t['profit_loss'] > 0])
        losing_trades = len([t for t in trades if t['profit_loss'] <= 0])
        profits = [t['profit_loss'] for t in trades if t['profit_loss'] > 0]
        losses = [t['profit_loss'] for t in trades if t['profit_loss'] <= 0]
        avg_profit = np.mean(profits) if profits else 0
        avg_loss = np.mean(losses) if losses else 0
        total_profit = sum(profits)
        total_loss = sum(losses)
        win_rate = winning_trades / total_trades if total_trades > 0 else 0
        profit_factor = abs(total_profit / total_loss) if total_loss != 0 else float('inf')
        total_return = (equity_curve.iloc[-1] - self.initial_capital) / self.initial_capital
        max_drawdown = abs((equity_curve - equity_curve.expanding().max()).min())
        sharpe_ratio = np.sqrt(252) * (equity_curve.pct_change().dropna().mean() / equity_curve.pct_change().dropna().std()) if len(equity_curve.pct_change().dropna()) > 1 else 0
        return {
            "Total Trades": total_trades,
            "Winning Trades": winning_trades,
            "Losing Trades": losing_trades,
            "Avg Profit": avg_profit,
            "Avg Loss": avg_loss,
            "Win Rate": win_rate,
            "Profit Factor": profit_factor,
            "Total Return": total_return,
            "Max Drawdown": max_drawdown,
            "Sharpe Ratio": sharpe_ratio
        }

    def print_statistics(self, stats, trade_type=""):
        print(f"\n{trade_type} Trading Statistics:")
        print("=" * 50)
        excluded_keys = ["Daily Returns", "Rolling Max", "Drawdown"]
        for key, value in stats.items():
            if key in excluded_keys:
                continue
            if isinstance(value, float):
                print(f"{key}: {value:.2f}")
            elif isinstance(value, list):
                formatted_list = ', '.join(f"{v:.2f}" if isinstance(v, float) else str(v) for v in value)
                print(f"{key}: {formatted_list}")
            elif isinstance(value, pd.Series):
                formatted_series = value.to_string()
                print(f"{key}:\n{formatted_series}")
            else:
                print(f"{key}: {value}")

def main():
    stock_symbol = "BTC-EUR"
    system = TradingSystem()  # Instanziierung der TradingSystem-Klasse
    print(stock_symbol)

    end_date = datetime.now()
    start_date = end_date - timedelta(days=365)

    # Laden der Daten
    stock_data = yf.download(stock_symbol, start=start_date, end=end_date)
    print("Available columns in stock_data:")
    print(stock_data.columns)

    # Flatten den DataFrame (nur einmal)
    stock_data = flatten_dataframe(stock_data)

    # Spaltennamen definieren
    close_col = f'Close_{stock_symbol}'
    high_col = f'High_{stock_symbol}'
    low_col = f'Low_{stock_symbol}'

    # Trend-Berechnungen (TrendUp und TrendDown)
    if 'TrendUp' not in stock_data.columns:
        try:
            stock_data['ShortMA'] = stock_data[close_col].rolling(window=20).mean()
            stock_data['LongMA'] = stock_data[close_col].rolling(window=50).mean()
            stock_data['TrendUp'] = stock_data['ShortMA'] > stock_data['LongMA']
            stock_data['TrendUp'] = stock_data['TrendUp'].fillna(False)
            print("TrendUp column created successfully")
        except Exception as e:
            print(f"Error creating TrendUp column: {e}")
            print("Available columns:", stock_data.columns)

    if 'TrendDown' not in stock_data.columns:
        stock_data['TrendDown'] = ~stock_data['TrendUp']
    # Calculate Supertrend and Combined Supertrend
    st, combined_supertrend, supertrend_colors = get_supertrend(
        stock_data[high_col], stock_data[low_col], stock_data[close_col], 7, 3
    )

    # Add to the DataFrame
    stock_data['Supertrend'] = st
    stock_data['CombinedSupertrend'] = combined_supertrend
    stock_data['SupertrendColors'] = supertrend_colors  # Add color information
    # Implementierung der Supertrend-Strategie
    buy_price, sell_price, st_signal = implement_st_strategy(stock_data[close_col], stock_data['Supertrend'])
    stock_data['Buy_Signal_Price'] = buy_price
    stock_data['Sell_Signal_Price'] = sell_price
    stock_data['ST_Signal'] = st_signal

    # Generierung von Handelslisten
    long_trades, short_trades = system.generate_trading_lists(stock_data, stock_symbol)

    # Berechnung der Equity-Kurven
    long_equity = system.calculate_equity_curve(stock_data, long_trades, '2023-05-21')
    short_equity = system.calculate_equity_curve(stock_data, short_trades, '2023-06-19')

    # Kombinierte Equity
    combined_equity = long_equity.combine_first(short_equity) - system.initial_capital + system.initial_capital

    # Buy-and-Hold-Equity
    buy_and_hold_equity = (stock_data[close_col] / stock_data[close_col].iloc[0]) * system.initial_capital

    # Debugging: Handelsdaten
    print("Long Trades:")
    print(pd.DataFrame(long_trades).to_string(index=False))
    print("\nShort Trades:")
    print(pd.DataFrame(short_trades).to_string(index=False))

    # Handelsstatistiken berechnen
    long_stats = system.calculate_trade_statistics(long_trades, long_equity)
    short_stats = system.calculate_trade_statistics(short_trades, short_equity)
    system.print_statistics(long_stats, "Long")
    system.print_statistics(short_stats, "Short")

    # Berechnung von Aroon und ADX
    print("Berechnung von Aroon und ADX...")
    stock_data = calculate_aroon_adx(stock_data, high_col, low_col, close_col)

    # Debugging: Spalten und Werte
    aroon_up_col = f'Aroon_Up_{stock_symbol}'
    aroon_down_col = f'Aroon_Down_{stock_symbol}'
    
    print("Nach Berechnung von Aroon und ADX:")
    print(stock_data[[aroon_up_col, aroon_down_col, 'ADX']])
#    print("Nach Berechnung von Aroon und ADX:")
#    print(stock_data[[aroon_up_col, aroon_down_col, 'ADX']].head())
#    print("Spalten in stock_data:", stock_data.columns)
    
        # Plot der Ergebnisse
    print("Erstelle Plot...")
    fig = system.plot_results(stock_data, long_trades, short_trades, long_equity, short_equity, buy_and_hold_equity, stock_symbol)
    fig.show()

import plotly.io as pio
pio.renderers.default = 'browser'

if __name__ == "__main__":
    main()
    
